_________________________________________ test_generate_ml_signals_bullish _________________________________________ 

    def test_generate_ml_signals_bullish():
        """Test ML signal generation for bullish trend."""
        input_data = {
            'symbol': 'BTC/USDT',
            'trend': 'bullish',
            'strength': Decimal('0.8')
        }

>       signals = generate_ml_signals(input_data)
E       TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'

tests\unit\test_signal_generation.py:18: TypeError
_________________________________________ test_generate_ml_signals_bearish _________________________________________ 

    def test_generate_ml_signals_bearish():
        """Test ML signal generation for bearish trend."""
        input_data = {
            'symbol': 'BTC/USDT',
            'trend': 'bearish',
            'strength': Decimal('0.7')
        }

>       signals = generate_ml_signals(input_data)
E       TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'

tests\unit\test_signal_generation.py:31: TypeError
______________________________________ test_generate_ml_signals_invalid_trend ______________________________________ 

    def test_generate_ml_signals_invalid_trend():
        """Test ML signal generation with invalid trend."""
        input_data = {
            'symbol': 'BTC/USDT',
            'trend': 'neutral',
            'strength': Decimal('0.5')
        }

        with pytest.raises(ValidationError, match="Invalid trend: neutral"):
>           generate_ml_signals(input_data)
E           TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'

tests\unit\test_signal_generation.py:45: TypeError
________________________________________ test_generate_ga_signals_crossover ________________________________________ 

    def test_generate_ga_signals_crossover():
        """Test GA signal generation for crossover strategy."""
        input_data = {
            'symbol': 'ETH/USDT',
            'strategy': 'crossover',
            'indicator_values': {'macd': Decimal('0.5'), 'rsi': Decimal('30')}
        }

>       signals = generate_ga_signals(input_data)
E       TypeError: generate_ga_signals() missing 1 required positional argument: 'population'

tests\unit\test_signal_generation.py:56: TypeError
_____________________________________ test_generate_ga_signals_platform_break ______________________________________ 

    def test_generate_ga_signals_platform_break():
        """Test GA signal generation for platform break strategy."""
        input_data = {
            'symbol': 'ETH/USDT',
            'strategy': 'platform_break',
            'indicator_values': {'volume': Decimal('1500')}
        }

>       signals = generate_ga_signals(input_data)
E       TypeError: generate_ga_signals() missing 1 required positional argument: 'population'

tests\unit\test_signal_generation.py:69: TypeError
____________________________________ test_generate_ga_signals_invalid_strategy _____________________________________ 

    def test_generate_ga_signals_invalid_strategy():
        """Test GA signal generation with invalid strategy."""
        input_data = {
            'symbol': 'ETH/USDT',
            'strategy': 'unknown_strategy',
            'indicator_values': {'volume': Decimal('1500')}
        }

        with pytest.raises(ValidationError, match="Invalid strategy: unknown_strategy"):
>           generate_ga_signals(input_data)
E           TypeError: generate_ga_signals() missing 1 required positional argument: 'population'

tests\unit\test_signal_generation.py:83: TypeError
_____________________________________________ test_generate_ml_signals _____________________________________________ 

    def test_generate_ml_signals():
        """Test generation of ML-based trade signals."""
        input_data = {
            'symbol': 'BTC/USDT',
            'trend': 'bullish',
            'strength': Decimal('0.8')
        }

>       signals = generate_ml_signals(input_data)
E       TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'

tests\unit\test_trade_signals.py:16: TypeError
_____________________________________________ test_generate_ga_signals _____________________________________________ 

    def test_generate_ga_signals():
        """Test generation of GA-based trade signals."""
        input_data = {
            'symbol': 'ETH/USDT',
            'strategy': 'crossover',
            'indicator_values': {'macd': Decimal('0.5'), 'rsi': Decimal('30')}
        }

>       signals = generate_ga_signals(input_data)
E       TypeError: generate_ga_signals() missing 1 required positional argument: 'population'

tests\unit\test_trade_signals.py:30: TypeError
_____________________________________________ test_invalid_signal_data _____________________________________________ 

    def test_invalid_signal_data():
        """Test signal generation with invalid data."""
        input_data_ml = {
            'symbol': 'BTC/USDT',
            'trend': 'unknown',
            'strength': Decimal('0.8')
        }

        with pytest.raises(ValidationError):
>           generate_ml_signals(input_data_ml)
E           TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'

tests\unit\test_trade_signals.py:45: TypeError
_______________________________________ test_validate_trade_parameters_valid _______________________________________ 

market_data_validation = MarketDataValidation(risk_limits=<src.risk.limits.RiskLimits object at 0x0000018E69F785F0>, logger=<MagicMock spec='Logger' id='1711174826896'>)

    def test_validate_trade_parameters_valid(market_data_validation):
        """Test validating trade parameters with valid data."""
        symbol = "BTC/USDT"
        trade_params = {
            'symbol': symbol,
            'side': 'buy',
            'amount': Decimal('0.1'),
            'price': Decimal('50000')
        }

>       assert market_data_validation.validate_trade_parameters(trade_params) is True
E       AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'

tests\unit\test_trade_validation.py:43: AttributeError
___________________________________ test_validate_trade_parameters_invalid_side ____________________________________ 

market_data_validation = MarketDataValidation(risk_limits=<src.risk.limits.RiskLimits object at 0x0000018E69D968A0>, logger=<MagicMock spec='Logger' id='1711172834784'>)

    def test_validate_trade_parameters_invalid_side(market_data_validation):
        """Test validating trade parameters with invalid side."""
        symbol = "BTC/USDT"
        trade_params = {
            'symbol': symbol,
            'side': 'hold',
            'amount': Decimal('0.1'),
            'price': Decimal('50000')
        }

        with pytest.raises(ValidationError, match="Invalid trade side: hold"):
>           market_data_validation.validate_trade_parameters(trade_params)
E           AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'

tests\unit\test_trade_validation.py:57: AttributeError
__________________________________ test_validate_trade_parameters_negative_amount __________________________________ 

market_data_validation = MarketDataValidation(risk_limits=<src.risk.limits.RiskLimits object at 0x0000018E69D96BD0>, logger=<MagicMock spec='Logger' id='1711172842512'>)

    def test_validate_trade_parameters_negative_amount(market_data_validation):
        """Test validating trade parameters with negative amount."""
        symbol = "BTC/USDT"
        trade_params = {
            'symbol': symbol,
            'side': 'sell',
            'amount': Decimal('-0.1'),
            'price': Decimal('50000')
        }

        with pytest.raises(ValidationError, match="Trade amount must be positive"):
>           market_data_validation.validate_trade_parameters(trade_params)
E           AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'

tests\unit\test_trade_validation.py:71: AttributeError
___________________________________ test_validate_trade_parameters_invalid_price ___________________________________ 

market_data_validation = MarketDataValidation(risk_limits=<src.risk.limits.RiskLimits object at 0x0000018E69F452E0>, logger=<MagicMock spec='Logger' id='1711174604352'>)

    def test_validate_trade_parameters_invalid_price(market_data_validation):
        """Test validating trade parameters with invalid price."""
        symbol = "BTC/USDT"
        trade_params = {
            'symbol': symbol,
            'side': 'buy',
            'amount': Decimal('0.1'),
            'price': Decimal('-50000')
        }

        with pytest.raises(ValidationError, match="Trade price must be positive"):
>           market_data_validation.validate_trade_parameters(trade_params)
E           AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'

tests\unit\test_trade_validation.py:85: AttributeError
____________________________________ test_validate_trade_with_high_correlation _____________________________________ 

market_data_validation = MarketDataValidation(risk_limits=<src.risk.limits.RiskLimits object at 0x0000018E69F466C0>, logger=<MagicMock spec='Logger' id='1711174601232'>)

    def test_validate_trade_with_high_correlation(market_data_validation):
        """Test validating trade with high market correlation."""
        symbol = "BTC/USDT"
        correlations = {"ETH/USDT": Decimal('0.8')}

        with pytest.raises(ValidationError, match="Correlation for ETH/USDT exceeds maximum allowed"):
>           market_data_validation.validate_correlation(symbol, correlations)
E           AttributeError: 'MarketDataValidation' object has no attribute 'validate_correlation'

tests\unit\test_trade_validation.py:94: AttributeError
______________________________________ test_validate_trade_with_low_liquidity ______________________________________ 

market_data_validation = MarketDataValidation(risk_limits=<src.risk.limits.RiskLimits object at 0x0000018E69F43740>, logger=<MagicMock spec='Logger' id='1711174595936'>)

    def test_validate_trade_with_low_liquidity(market_data_validation):
        """Test validating trade with insufficient liquidity."""
        symbol = "BTC/USDT"
        liquidity = Decimal('50000')

        with pytest.raises(ValidationError, match="Liquidity for BTC/USDT is below minimum required"):
>           market_data_validation.validate_liquidity(symbol, liquidity)
E           AttributeError: 'MarketDataValidation' object has no attribute 'validate_liquidity'

tests\unit\test_trade_validation.py:103: AttributeError
____________________________________________ test_percentage_to_decimal ____________________________________________ 

numeric_handler = <src.utils.numeric_handler.NumericHandler object at 0x0000018E69F400E0>

    def test_percentage_to_decimal(numeric_handler):
        result = numeric_handler.percentage_to_decimal(Decimal('50'))
        assert result == Decimal('0.5')

        with pytest.raises(MathError):
>           numeric_handler.percentage_to_decimal(Decimal('invalid'))
E           decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]

tests\unit\test_trading_math_handler.py:41: InvalidOperation
_______________________________________ test_validate_trade_parameters_valid _______________________________________ 

data_validator = <src.utils.data_validator.DataValidator object at 0x0000018E6B806750>

    def test_validate_trade_parameters_valid(data_validator):
        """Test validation of valid trade parameters."""
        trade_params = {
            'symbol': 'BTC/USDT',
            'side': 'buy',
            'price': Decimal('50000'),
            'amount': Decimal('0.1')
        }
>       is_valid, error = data_validator.validate_trade_parameters(trade_params)
E       TypeError: cannot unpack non-iterable bool object

tests\unit\test_utils_data_validator.py:20: TypeError
___________________________________ test_validate_trade_parameters_invalid_price ___________________________________ 

data_validator = <src.utils.data_validator.DataValidator object at 0x0000018E6B8060C0>

    def test_validate_trade_parameters_invalid_price(data_validator):
        """Test validation fails with invalid price."""
        trade_params = {
            'symbol': 'ETH/USDT',
            'side': 'sell',
            'price': Decimal('-3000'),
            'amount': Decimal('1')
        }
>       is_valid, error = data_validator.validate_trade_parameters(trade_params)
E       TypeError: cannot unpack non-iterable bool object

tests\unit\test_utils_data_validator.py:33: TypeError
___________________________________ test_validate_trade_parameters_invalid_side ____________________________________ 

data_validator = <src.utils.data_validator.DataValidator object at 0x0000018E6B804650>

    def test_validate_trade_parameters_invalid_side(data_validator):
        """Test validation fails with invalid side."""
        trade_params = {
            'symbol': 'SOL/USDT',
            'side': 'hold',
            'price': Decimal('100'),
            'amount': Decimal('10')
        }
>       is_valid, error = data_validator.validate_trade_parameters(trade_params)
E       TypeError: cannot unpack non-iterable bool object

tests\unit\test_utils_data_validator.py:46: TypeError
___________________________________ test_validate_trade_parameters_missing_field ___________________________________ 

data_validator = <src.utils.data_validator.DataValidator object at 0x0000018E69FFB890>

    def test_validate_trade_parameters_missing_field(data_validator):
        """Test validation fails with missing fields."""
        trade_params = {
            'symbol': 'ADA/USDT',
            'side': 'buy',
            # Missing price and amount
        }
>       is_valid, error = data_validator.validate_trade_parameters(trade_params)

tests\unit\test_utils_data_validator.py:58:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

self = <src.utils.data_validator.DataValidator object at 0x0000018E69FFB890>
data = {'side': 'buy', 'symbol': 'ADA/USDT'}

    def validate_trade_parameters(self, data: dict):
        required_fields = ['symbol', 'amount', 'price', 'side']
        for field in required_fields:
            if field not in data:
>               raise ValueError(f"Missing required field: {field}")
E               ValueError: Missing required field: amount

src\utils\data_validator.py:62: ValueError
________________________________ test_validate_trade_parameters_non_decimal_amount _________________________________ 

data_validator = <src.utils.data_validator.DataValidator object at 0x0000018E6B806AE0>

    def test_validate_trade_parameters_non_decimal_amount(data_validator):
        """Test validation fails with non-decimal amount."""
        trade_params = {
            'symbol': 'BTC/USDT',
            'side': 'buy',
            'price': Decimal('50000'),
            'amount': '0.1'  # Should be Decimal
        }
>       with pytest.raises(AttributeError):
E       Failed: DID NOT RAISE <class 'AttributeError'>

tests\unit\test_utils_data_validator.py:71: Failed
______________________________________ test_handle_error_database_error_sync _______________________________________ 

mock_logger = <MagicMock spec='Logger' id='1711175350512'>

    def test_handle_error_database_error_sync(mock_logger):
        """Test handling of a synchronous DatabaseError."""
        exception = DatabaseError("Database Insert Failed")
        context = "TestContext"

        handle_error(exception, context, mock_logger, metadata={"operation": "insert"})

>       mock_logger.error.assert_called_with(
            "Error in TestContext: Database Insert Failed",
            exc_info=True,
            extra={"operation": "insert"}
        )

tests\unit\test_utils_database_error_handler.py:21:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

self = <MagicMock name='mock.error' id='1711175342304'>, args = ('Error in TestContext: Database Insert Failed',)    
kwargs = {'exc_info': True, 'extra': {'operation': 'insert'}}
expected = call('Error in TestContext: Database Insert Failed', exc_info=True, extra={'operation': 'insert'})        
actual = call('Error in TestContext: Database Insert Failed', exc_info=False, extra={'operation': 'insert'})
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x0000018E6B8DC5E0>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.

        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)

        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: error('Error in TestContext: Database Insert Failed', exc_info=True, extra={'operation': 'insert'})
E             Actual: error('Error in TestContext: Database Insert Failed', exc_info=False, extra={'operation': 'insert'})

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2544.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:949: AssertionError
______________________________________ test_handle_error_database_error_async ______________________________________ 

mock_logger = <MagicMock spec='Logger' id='1711171853136'>

    @pytest.mark.asyncio
    async def test_handle_error_database_error_async(mock_logger):
        """Test handling of an asynchronous DatabaseError."""
        exception = DatabaseError("Database Query Failed")
        context = "AsyncTestContext"

>       await handle_error_async(exception, context, mock_logger, metadata={"operation": "query"})
E       TypeError: object NoneType can't be used in 'await' expression

tests\unit\test_utils_database_error_handler.py:34: TypeError
______________________________________________ test_handle_error_sync ______________________________________________ 

mock_logger = <MagicMock spec='Logger' id='1711166869472'>

    def test_handle_error_sync(mock_logger):
        """Test synchronous error handling."""
        exception = Exception("Test Exception")
        context = "TestContext"

        handle_error(exception, context, mock_logger, metadata={"key": "value"})

>       mock_logger.error.assert_called_with(
            "Error in TestContext: Test Exception",
            exc_info=True,
            extra={"key": "value"}
        )

tests\unit\test_utils_error_handler.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

self = <MagicMock name='mock.error' id='1711166875760'>, args = ('Error in TestContext: Test Exception',)
kwargs = {'exc_info': True, 'extra': {'key': 'value'}}
expected = call('Error in TestContext: Test Exception', exc_info=True, extra={'key': 'value'})
actual = call('Error in TestContext: Test Exception', exc_info=False, extra={'key': 'value'})
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x0000018E6B8DC900>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.

        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)

        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: error('Error in TestContext: Test Exception', exc_info=True, extra={'key': 'value'})
E             Actual: error('Error in TestContext: Test Exception', exc_info=False, extra={'key': 'value'})

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2544.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:949: AssertionError
___________________________________________ test_handle_error_async_sync ___________________________________________ 

mock_logger = <MagicMock spec='Logger' id='1711200711696'>

    @pytest.mark.asyncio
    async def test_handle_error_async_sync(mock_logger):
        """Test asynchronous error handling."""
        exception = Exception("Async Test Exception")
        context = "AsyncTestContext"

>       await handle_error_async(exception, context, mock_logger, metadata={"async_key": "async_value"})
E       TypeError: object NoneType can't be used in 'await' expression

tests\unit\test_utils_error_handler.py:37: TypeError
____________________________________________ test_setup_logging_default ____________________________________________ 

    def test_setup_logging_default():
        """Test logger setup with default settings."""
        with patch("logging.FileHandler") as mock_file_handler, \
             patch("os.makedirs") as mock_makedirs:

            mock_file = MagicMock()
            mock_file_handler.return_value = mock_file

            logger = setup_logging(name="DefaultLogger", level="INFO")

            assert logger.name == "DefaultLogger"
            assert logger.level == logging.INFO
>           assert len(logger.handlers) == 2  # StreamHandler and FileHandler
E           AssertionError: assert 4 == 2
E            +  where 4 = len([<StreamHandler <tempfile._TemporaryFileWrapper object at 0x0000018E44C248C0> (NOTSET)>, <MagicMock name='FileHandler(...ile._TemporaryFileWrapper object at 0x0000018E44C248C0> (NOTSET)>, <MagicMock name='FileHandler()' id='1711201234208'>])
E            +    where [<StreamHandler <tempfile._TemporaryFileWrapper object at 0x0000018E44C248C0> (NOTSET)>, <MagicMock name='FileHandler(...ile._TemporaryFileWrapper object at 0x0000018E44C248C0> (NOTSET)>, <MagicMock name='FileHandler()' id='1711201234208'>] = <Logger DefaultLogger (INFO)>.handlers

tests\unit\test_utils_logger.py:20: AssertionError
_______________________________________ test_setup_logging_custom_log_output _______________________________________ 

    def test_setup_logging_custom_log_output():
        """Test logger setup with custom log output via environment variable."""
        with patch.dict(os.environ, {"LOG_OUTPUT": "custom_logs/trading_bot.log"}), \
             patch("os.makedirs") as mock_makedirs, \
             patch("logging.FileHandler") as mock_file_handler:

            mock_file = MagicMock()
            mock_file_handler.return_value = mock_file
            logger = setup_logging(name="CustomLogger", level="DEBUG")

>           mock_makedirs.assert_called_once_with("custom_logs", exist_ok=True)

tests\unit\test_utils_logger.py:35:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2544.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:961: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

self = <MagicMock name='makedirs' id='1711174611408'>, args = ('custom_logs',), kwargs = {'exist_ok': True}
expected = call('custom_logs', exist_ok=True), actual = call('logs', exist_ok=True)
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x0000018E6B8DC900>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.

        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)

        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: makedirs('custom_logs', exist_ok=True)
E             Actual: makedirs('logs', exist_ok=True)

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2544.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:949: AssertionError
_________________________________________ test_setup_logging_invalid_level _________________________________________ 

    def test_setup_logging_invalid_level():
        """Test logger setup with invalid log level."""
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

tests\unit\test_utils_logger.py:43: Failed
_________________________________________ test_calculate_percentage_change _________________________________________ 

numeric_handler = <src.utils.numeric_handler.NumericHandler object at 0x0000018E69F84740>

    def test_calculate_percentage_change(numeric_handler):
        """Test calculation of percentage change."""
        old_value = Decimal('100')
        new_value = Decimal('110')
        change = numeric_handler.calculate_percentage_change(old_value, new_value)
>       assert change == Decimal('0.10')  # 10% increase
E       AssertionError: assert Decimal('10.0') == Decimal('0.10')
E        +  where Decimal('0.10') = Decimal('0.10')

tests\unit\test_utils_numeric_handler.py:35: AssertionError
================================================= warnings summary ================================================= 
venv\Lib\site-packages\pandas_ta\__init__.py:7
  C:\Users\Phil\Bot\venv\Lib\site-packages\pandas_ta\__init__.py:7: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    from pkg_resources import get_distribution, DistributionNotFound

tests/test_execution_main_loop.py: 2 warnings
tests/test_signal_generation.py: 2 warnings
tests/unit/test_error_handler.py: 2 warnings
tests/unit/test_exchange_interface.py: 7 warnings
tests/unit/test_exchange_interface_errors.py: 1 warning
tests/unit/test_exchange_manager.py: 1 warning
tests/unit/test_execution_order_manager.py: 11 warnings
tests/unit/test_math_handler.py: 1 warning
tests/unit/test_order_manager.py: 5 warnings
tests/unit/test_order_manager_extras.py: 2 warnings
tests/unit/test_portfolio_manager.py: 3 warnings
tests/unit/test_position.py: 6 warnings
tests/unit/test_rate_limiter.py: 2 warnings
tests/unit/test_risk.py: 1 warning
tests/unit/test_risk_manager.py: 5 warnings
tests/unit/test_risk_manager_edge.py: 1 warning
tests/unit/test_trading_math_handler.py: 2 warnings
tests/unit/test_utils_database_error_handler.py: 1 warning
tests/unit/test_utils_error_handler.py: 1 warning
  c:\Users\Phil\Bot\venv\Lib\site-packages\pytest_asyncio\plugin.py:867: DeprecationWarning: The event_loop fixture provided by pytest-asyncio has been redefined in
  C:\Users\Phil\Bot\tests\conftest.py:155
  Replacing the event_loop fixture with a custom implementation is deprecated
  and will lead to errors in the future.
  If you want to request an asyncio event loop with a scope other than function
  scope, use the "loop_scope" argument to the asyncio mark when marking the tests.
  If you want to return different types of event loops, use the event_loop_policy
  fixture.

    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
============================================= short test summary info ============================================== 
FAILED tests/test_execution_main_loop.py::test_main_loop_no_signals - AssertionError: Expected 'get_signals' to have been called.
FAILED tests/test_execution_main_loop.py::test_main_loop_with_signals - AssertionError: Expected 'get_signals' to have been called.
FAILED tests/test_math_handler.py::test_calculate_kelly_fraction - AssertionError: assert Decimal('0') == Decimal('0.2')
FAILED tests/test_math_handler.py::test_calculate_position_size - TypeError: MathHandler.calculate_position_size() missing 1 required positional argument: 'volatility'
FAILED tests/test_math_handler.py::test_calculate_expected_value - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
FAILED tests/test_signal_generation.py::test_generate_ga_signals_valid - TypeError: handle_error() missing 1 required positional argument: 'logger'
FAILED tests/test_signal_generation.py::test_generate_ga_signals_invalid_action - TypeError: handle_error() missing 1 required positional argument: 'logger'
FAILED tests/test_trade_signals.py::test_trade_signals_valid - TypeError: generate_ga_signals() missing 1 required positional argument: 'population'
FAILED tests/test_trade_signals.py::test_trade_signals_invalid_action - TypeError: generate_ga_signals() missing 1 required positional argument: 'population'
FAILED tests/test_trading_math_handler.py::test_safe_divide - decimal.DivisionByZero: Division by zero.
FAILED tests/test_trading_math_handler.py::test_percentage_to_decimal - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
FAILED tests/unit/test_data_candles.py::test_calculate_atr - AssertionError: assert None == Decimal('20')
FAILED tests/unit/test_data_candles.py::test_calculate_atr_insufficient_data - Failed: DID NOT RAISE <class 'src.utils.error_handler.ValidationError'>
FAILED tests/unit/test_error_handler.py::test_handle_error_sync - AssertionError: expected call not found.
FAILED tests/unit/test_error_handler.py::test_handle_error_async - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_exchange_interface.py::test_execute_trade_success - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_exchange_interface.py::test_execute_trade_risk_validation_failure - AttributeError: Mock object has no attribute 'validate_trade'. Did you mean: 'validate_order'?
FAILED tests/unit/test_exchange_interface.py::test_execute_trade_exchange_error - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_exchange_interface.py::test_fetch_candles_success - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_exchange_interface.py::test_fetch_candles_exchange_error - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_exchange_interface_errors.py::test_exchange_order_failure - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_exchange_manager.py::test_rate_limiter_within_limits - TypeError: RateLimiter.acquire() missing 1 required positional argument: 'key'
FAILED tests/unit/test_execution_order_manager.py::test_place_order_success - AttributeError: Mock object has no attribute 'store_order'. Did you mean: 'store_trade'?
FAILED tests/unit/test_execution_order_manager.py::test_place_order_risk_failure - AttributeError: Mock object has no attribute 'store_order'. Did you mean: 'store_trade'?
FAILED tests/unit/test_execution_order_manager.py::test_place_order_exchange_error - src.utils.error_handler.ExchangeError: Exchange Error
FAILED tests/unit/test_execution_order_manager.py::test_cancel_order_success - AttributeError: Mock object has no attribute 'update_order_status'. Did you mean: 'update_position_status'?
FAILED tests/unit/test_execution_order_manager.py::test_cancel_order_failure - AssertionError: Expected cancel_trade to have been awaited once. Awaited 0 times.
FAILED tests/unit/test_execution_order_manager.py::test_get_order_status_success - AttributeError: 'OrderManager' object has no attribute 'get_order_status'
FAILED tests/unit/test_execution_order_manager.py::test_get_order_status_exchange_error - AttributeError: 'OrderManager' object has no attribute 'get_order_status'
FAILED tests/unit/test_execution_order_manager.py::test_handle_error_async - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_execution_order_manager.py::test_handle_error_async_with_none_metadata - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_execution_order_manager.py::test_execute_trade_success - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_logger.py::test_setup_logging_console_only - TypeError: setup_logging() got an unexpected keyword argument 'console_only'
FAILED tests/unit/test_logger.py::test_setup_logging_file_output - AssertionError: expected call not found.
FAILED tests/unit/test_logger_extras.py::test_logger_invalid_directory - Failed: DID NOT RAISE <class 'Exception'>   
FAILED tests/unit/test_logger_setup.py::test_setup_logging_custom_log_output - AssertionError: expected call not found.
FAILED tests/unit/test_market_data.py::test_market_state_preparation - KeyError: 'symbol'
FAILED tests/unit/test_market_data_validation.py::test_validate_trade_parameters_valid - AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'
FAILED tests/unit/test_market_data_validation.py::test_validate_trade_parameters_invalid_side - AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'
FAILED tests/unit/test_market_data_validation.py::test_validate_correlation_exceeds_limit - AttributeError: 'MarketDataValidation' object has no attribute 'validate_correlation'
FAILED tests/unit/test_market_data_validation.py::test_validate_liquidity_below_minimum - AttributeError: 'MarketDataValidation' object has no attribute 'validate_liquidity'
FAILED tests/unit/test_market_data_validation.py::test_validate_volatility_within_limit - AttributeError: 'MarketDataValidation' object has no attribute 'validate_volatility'
FAILED tests/unit/test_market_data_validation.py::test_validate_volatility_exceeds_limit - AttributeError: 'MarketDataValidation' object has no attribute 'validate_volatility'
FAILED tests/unit/test_market_data_validation.py::test_validate_sector_exposure_within_limit - AttributeError: 'MarketDataValidation' object has no attribute 'validate_sector_exposure'
FAILED tests/unit/test_market_data_validation.py::test_validate_sector_exposure_exceeds_limit - AttributeError: 'MarketDataValidation' object has no attribute 'validate_sector_exposure'
FAILED tests/unit/test_math_handler.py::test_safe_divide - decimal.DivisionByZero: Division by zero.
FAILED tests/unit/test_math_handler.py::test_percentage_to_decimal - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
FAILED tests/unit/test_math_handler.py::test_calculate_expected_value_invalid - NameError: name 'MathHandler' is not defined
FAILED tests/unit/test_numeric_handler.py::test_numeric_rounding - AttributeError: 'NumericHandler' object has no attribute 'round_value'
FAILED tests/unit/test_numeric_handler.py::test_numeric_conversion - AttributeError: 'NumericHandler' object has no attribute 'convert_to_decimal'
FAILED tests/unit/test_order_manager.py::test_store_order_success - AttributeError: 'OrderManager' object has no attribute 'store_order'. Did you mean: 'place_order'?
FAILED tests/unit/test_order_manager.py::test_store_order_failure - AttributeError: 'OrderManager' object has no attribute 'store_order'. Did you mean: 'place_order'?
FAILED tests/unit/test_order_manager.py::test_place_order_exchange_failure - AssertionError: Expected execute_trade to not have been awaited. Awaited 1 times.
FAILED tests/unit/test_order_manager_extras.py::test_order_cancellation - Failed: DID NOT RAISE <class 'src.utils.error_handler.OrderError'>
FAILED tests/unit/test_portfolio_manager.py::test_portfolio_initialization - AttributeError: 'PortfolioManager' object has no attribute 'current_balance'
FAILED tests/unit/test_portfolio_manager.py::test_add_position_within_limits - TypeError: PortfolioManager.add_position() missing 2 required positional arguments: 'size' and 'entry_price'
FAILED tests/unit/test_portfolio_manager.py::test_add_position_exceeds_max_positions - TypeError: PortfolioManager.add_position() missing 2 required positional arguments: 'size' and 'entry_price'
FAILED tests/unit/test_portfolio_manager.py::test_add_position_exceeds_max_size - TypeError: Position.__init__() got an unexpected keyword argument 'id'
FAILED tests/unit/test_portfolio_manager.py::test_remove_position_success - TypeError: Position.__init__() got an unexpected keyword argument 'id'
FAILED tests/unit/test_portfolio_manager.py::test_remove_position_not_found - AttributeError: 'PortfolioManager' object has no attribute 'remove_position'. Did you mean: 'close_position'?
FAILED tests/unit/test_portfolio_manager.py::test_get_total_exposure - TypeError: Position.__init__() got an unexpected keyword argument 'id'
FAILED tests/unit/test_position.py::test_position_creation_valid - AttributeError: 'Position' object has no attribute 'status'
FAILED tests/unit/test_position.py::test_position_creation_invalid_side - Failed: DID NOT RAISE <class 'ValueError'> 
FAILED tests/unit/test_position.py::test_position_update_price_valid - AssertionError: assert Decimal('0') == Decimal('250')
FAILED tests/unit/test_position.py::test_position_update_price_invalid - Failed: DID NOT RAISE <class 'utils.exceptions.PositionError'>
FAILED tests/unit/test_position.py::test_position_close_success - AttributeError: 'Position' object has no attribute 'status'
FAILED tests/unit/test_position.py::test_position_close_already_closed - Failed: DID NOT RAISE <class 'utils.exceptions.PositionError'>
FAILED tests/unit/test_position_info.py::test_position_info_initialization - TypeError: PositionInfo.__init__() got an unexpected keyword argument 'id'
FAILED tests/unit/test_position_info.py::test_position_info_update_pnl - TypeError: PositionInfo.__init__() got an unexpected keyword argument 'id'
FAILED tests/unit/test_position_info.py::test_position_info_close - TypeError: PositionInfo.__init__() got an unexpected keyword argument 'id'
FAILED tests/unit/test_position_info.py::test_position_info_creation - TypeError: PositionInfo.__init__() missing 7 required positional arguments: 'side', 'entry_price', 'size', 'time...
FAILED tests/unit/test_rate_limiter.py::test_rate_limiter_allow_requests - TypeError: RateLimiter.acquire() missing 1 required positional argument: 'key'
FAILED tests/unit/test_rate_limiter.py::test_rate_limiter_reset_after_window - TypeError: RateLimiter.acquire() missing 1 required positional argument: 'key'
FAILED tests/unit/test_risk.py::test_risk_limits_validation - AttributeError: 'RiskLimits' object has no attribute 'validate_position_size'. Did you mean: 'max_position_size'?
FAILED tests/unit/test_risk_manager.py::test_calculate_position_size - TypeError: RiskManager.calculate_position_size() takes 2 positional arguments but 3 were given
FAILED tests/unit/test_risk_manager.py::test_validate_risk_metrics_within_limits - TypeError: RiskManager.validate_risk_metrics() missing 1 required positional argument: 'metrics'
FAILED tests/unit/test_risk_manager.py::test_validate_risk_metrics_exceed_drawdown - TypeError: RiskManager.validate_risk_metrics() missing 1 required positional argument: 'metrics'
FAILED tests/unit/test_risk_manager.py::test_validate_risk_metrics_exceed_daily_loss - TypeError: RiskManager.validate_risk_metrics() missing 1 required positional argument: 'metrics'
FAILED tests/unit/test_risk_manager.py::test_emergency_stop_triggered - TypeError: RiskManager.validate_risk_metrics() missing 1 required positional argument: 'metrics'
FAILED tests/unit/test_risk_manager_edge.py::test_risk_manager_borderline_values - TypeError: RiskManager.validate_risk_metrics() missing 1 required positional argument: 'metrics'
FAILED tests/unit/test_signal_generation.py::test_generate_ml_signals_bullish - TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'
FAILED tests/unit/test_signal_generation.py::test_generate_ml_signals_bearish - TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'
FAILED tests/unit/test_signal_generation.py::test_generate_ml_signals_invalid_trend - TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'
FAILED tests/unit/test_signal_generation.py::test_generate_ga_signals_crossover - TypeError: generate_ga_signals() missing 1 required positional argument: 'population'
FAILED tests/unit/test_signal_generation.py::test_generate_ga_signals_platform_break - TypeError: generate_ga_signals() missing 1 required positional argument: 'population'
FAILED tests/unit/test_signal_generation.py::test_generate_ga_signals_invalid_strategy - TypeError: generate_ga_signals() missing 1 required positional argument: 'population'
FAILED tests/unit/test_trade_signals.py::test_generate_ml_signals - TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'
FAILED tests/unit/test_trade_signals.py::test_generate_ga_signals - TypeError: generate_ga_signals() missing 1 required positional argument: 'population'
FAILED tests/unit/test_trade_signals.py::test_invalid_signal_data - TypeError: generate_ml_signals() missing 1 required positional argument: 'ctx'
FAILED tests/unit/test_trade_validation.py::test_validate_trade_parameters_valid - AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'
FAILED tests/unit/test_trade_validation.py::test_validate_trade_parameters_invalid_side - AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'
FAILED tests/unit/test_trade_validation.py::test_validate_trade_parameters_negative_amount - AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'
FAILED tests/unit/test_trade_validation.py::test_validate_trade_parameters_invalid_price - AttributeError: 'MarketDataValidation' object has no attribute 'validate_trade_parameters'
FAILED tests/unit/test_trade_validation.py::test_validate_trade_with_high_correlation - AttributeError: 'MarketDataValidation' object has no attribute 'validate_correlation'
FAILED tests/unit/test_trade_validation.py::test_validate_trade_with_low_liquidity - AttributeError: 'MarketDataValidation' object has no attribute 'validate_liquidity'
FAILED tests/unit/test_trading_math_handler.py::test_percentage_to_decimal - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
FAILED tests/unit/test_utils_data_validator.py::test_validate_trade_parameters_valid - TypeError: cannot unpack non-iterable bool object
FAILED tests/unit/test_utils_data_validator.py::test_validate_trade_parameters_invalid_price - TypeError: cannot unpack non-iterable bool object
FAILED tests/unit/test_utils_data_validator.py::test_validate_trade_parameters_invalid_side - TypeError: cannot unpack non-iterable bool object
FAILED tests/unit/test_utils_data_validator.py::test_validate_trade_parameters_missing_field - ValueError: Missing required field: amount
FAILED tests/unit/test_utils_data_validator.py::test_validate_trade_parameters_non_decimal_amount - Failed: DID NOT RAISE <class 'AttributeError'>
FAILED tests/unit/test_utils_database_error_handler.py::test_handle_error_database_error_sync - AssertionError: expected call not found.
FAILED tests/unit/test_utils_database_error_handler.py::test_handle_error_database_error_async - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_utils_error_handler.py::test_handle_error_sync - AssertionError: expected call not found.     
FAILED tests/unit/test_utils_error_handler.py::test_handle_error_async_sync - TypeError: object NoneType can't be used in 'await' expression
FAILED tests/unit/test_utils_logger.py::test_setup_logging_default - AssertionError: assert 4 == 2
FAILED tests/unit/test_utils_logger.py::test_setup_logging_custom_log_output - AssertionError: expected call not found.
FAILED tests/unit/test_utils_logger.py::test_setup_logging_invalid_level - Failed: DID NOT RAISE <class 'ValueError'>
FAILED tests/unit/test_utils_numeric_handler.py::test_calculate_percentage_change - AssertionError: assert Decimal('10.0') == Decimal('0.10')
ERROR tests/integration/test_exchange.py::test_fetch_ticker_success
ERROR tests/integration/test_exchange.py::test_fetch_ticker_exchange_error
ERROR tests/integration/test_exchange.py::test_execute_trade_limit_order_success
ERROR tests/integration/test_exchange.py::test_execute_trade_market_order_success
ERROR tests/integration/test_exchange.py::test_cancel_order_success
ERROR tests/integration/test_exchange.py::test_cancel_order_not_found
ERROR tests/integration/test_exchange.py::test_fetch_candles_success
ERROR tests/integration/test_exchange.py::test_fetch_candles_exchange_error
ERROR tests/integration/test_full_trade_flow.py::test_full_trade_flow - TypeError: MainLoop.__init__() takes from 1 to 2 positional arguments but 5 were given
ERROR tests/integration/test_main_system.py::test_full_trading_cycle_success - AttributeError: Mock object has no attribute 'validate_market_conditions'
ERROR tests/integration/test_main_system.py::test_full_trading_cycle_risk_failure - AttributeError: Mock object has no attribute 'validate_market_conditions'
ERROR tests/integration/test_main_system.py::test_full_trading_cycle_trade_failure - AttributeError: Mock object has no attribute 'validate_market_conditions'
ERROR tests/integration/test_main_system.py::test_full_trading_cycle_fetch_market_data_failure - AttributeError: Mock object has no attribute 'validate_market_conditions'
ERROR tests/integration/test_system_integration_full.py::test_system_initialization_full - TypeError: SystemInitializer.__init__() takes 2 positional arguments but 4 were given
ERROR tests/test_risk_manager.py::test_position_size_calculation
ERROR tests/test_risk_manager.py::test_risk_limit_validation
ERROR tests/test_risk_manager.py::test_drawdown_protection
ERROR tests/test_risk_manager.py::test_correlation_limits
ERROR tests/test_risk_manager.py::test_leverage_limits
ERROR tests/test_risk_manager.py::test_emergency_stop
ERROR tests/test_risk_manager.py::test_kelly_sizing
ERROR tests/test_risk_manager.py::test_risk_factor_adjustment
ERROR tests/test_risk_manager.py::test_position_correlation
ERROR tests/unit/test_data_candles.py::test_insert_candles_success - TypeError: CandleManager.__init__() got an unexpected keyword argument 'exchange_interface'
ERROR tests/unit/test_data_candles.py::test_insert_candles_database_error - TypeError: CandleManager.__init__() got an unexpected keyword argument 'exchange_interface'
ERROR tests/unit/test_data_candles.py::test_fetch_and_store_candles - TypeError: CandleManager.__init__() got an unexpected keyword argument 'exchange_interface'
ERROR tests/unit/test_data_candles.py::test_fetch_and_store_candles_exchange_error - TypeError: CandleManager.__init__() got an unexpected keyword argument 'exchange_interface'
ERROR tests/unit/test_database.py::test_database_connection
ERROR tests/unit/test_database.py::test_insert_candles
ERROR tests/unit/test_database.py::test_store_trade_signal
ERROR tests/unit/test_database.py::test_position_management
ERROR tests/unit/test_database.py::test_error_handling
ERROR tests/unit/test_database_queries.py::test_store_trade_success - TypeError: DatabaseConnection.__init__() got an unexpected keyword argument 'logger'
ERROR tests/unit/test_database_queries.py::test_store_trade_failure - TypeError: DatabaseConnection.__init__() got an unexpected keyword argument 'logger'
ERROR tests/unit/test_database_queries.py::test_insert_candle_data_success - TypeError: DatabaseConnection.__init__() got an unexpected keyword argument 'logger'
ERROR tests/unit/test_database_queries.py::test_insert_candle_data_failure - TypeError: DatabaseConnection.__init__() got an unexpected keyword argument 'logger'
ERROR tests/unit/test_database_queries.py::test_store_order_success - TypeError: DatabaseConnection.__init__() got an unexpected keyword argument 'logger'
ERROR tests/unit/test_database_queries.py::test_store_order_failure - TypeError: DatabaseConnection.__init__() got an unexpected keyword argument 'logger'
ERROR tests/unit/test_database_queries.py::test_insert_and_retrieve_trade_signal
ERROR tests/unit/test_database_queries.py::test_insert_and_retrieve_candles
ERROR tests/unit/test_database_queries.py::test_store_trade
ERROR tests/unit/test_database_queries.py::test_create_and_update_position
ERROR tests/unit/test_database_queries_errors.py::test_db_store_trade_failure - TypeError: DatabaseQueries.__init__() missing 1 required positional argument: 'db_path'
ERROR tests/unit/test_exchange_manager.py::test_exchange_manager_initialization
ERROR tests/unit/test_exchange_manager.py::test_exchange_manager_initialize_failure
ERROR tests/unit/test_exchange_manager.py::test_exchange_manager_rate_limit
ERROR tests/unit/test_execution_main_loop.py::test_main_loop_run - AttributeError: 'function' object has no attribute 'Logger'
ERROR tests/unit/test_execution_main_loop.py::test_main_loop_execute_cycle_success - AttributeError: 'function' object has no attribute 'Logger'
ERROR tests/unit/test_execution_main_loop.py::test_main_loop_execute_cycle_risk_failure - AttributeError: 'function' object has no attribute 'Logger'
ERROR tests/unit/test_execution_main_loop.py::test_main_loop_execute_cycle_trade_failure - AttributeError: 'function' object has no attribute 'Logger'
ERROR tests/unit/test_execution_main_loop.py::test_main_loop_shutdown - AttributeError: 'function' object has no attribute 'Logger'
ERROR tests/unit/test_health_monitor.py::test_health_monitor_initialization
ERROR tests/unit/test_health_monitor.py::test_health_monitor_database_check_success
ERROR tests/unit/test_health_monitor.py::test_health_monitor_database_check_failure
ERROR tests/unit/test_health_monitor.py::test_health_monitor_exchange_check_success
ERROR tests/unit/test_health_monitor.py::test_health_monitor_exchange_check_failure
ERROR tests/unit/test_health_monitor.py::test_health_monitor_market_data_freshness
ERROR tests/unit/test_health_monitor_behavior.py::test_health_monitor_exchange_failure - Failed: Fixture "logger" called directly. Fixtures are not meant to be called directly,
ERROR tests/unit/test_market_data.py::test_fetch_market_data_success
ERROR tests/unit/test_market_data.py::test_fetch_market_data_exchange_error
ERROR tests/unit/test_market_data.py::test_get_market_price
ERROR tests/unit/test_market_data.py::test_market_data_validation
ERROR tests/unit/test_math_handler.py::test_calculate_kelly_fraction - NameError: name 'MathHandler' is not defined  
ERROR tests/unit/test_math_handler.py::test_calculate_expected_value - NameError: name 'MathHandler' is not defined  
ERROR tests/unit/test_ratchet_manager.py::test_ratchet_increase_position_success
ERROR tests/unit/test_ratchet_manager.py::test_ratchet_increase_position_exceeds_limits
ERROR tests/unit/test_ratchet_manager.py::test_ratchet_decrease_position_success
ERROR tests/unit/test_ratchet_manager.py::test_ratchet_decrease_position_failure
ERROR tests/unit/test_ratchet_manager.py::test_initialize_trade - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_ratchet_manager.py::test_update_position_ratchet - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_ratchet_manager.py::test_monitor_trades - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_risk.py::test_position_size_calculation
ERROR tests/unit/test_risk.py::test_risk_metrics_validation
ERROR tests/unit/test_risk.py::test_correlation_validation
ERROR tests/unit/test_risk.py::test_risk_manager_portfolio_management
ERROR tests/unit/test_risk_manager.py::test_calculate_kelly_fraction - NameError: name 'PortfolioManager' is not defined
ERROR tests/unit/test_risk_manager.py::test_validate_trade_within_limits - NameError: name 'PortfolioManager' is not defined
ERROR tests/unit/test_risk_manager.py::test_validate_trade_below_min_size - NameError: name 'PortfolioManager' is not defined
ERROR tests/unit/test_risk_manager.py::test_validate_trade_exceeds_max_positions - NameError: name 'PortfolioManager' is not defined
ERROR tests/unit/test_symbols.py::test_normalize_symbol - TypeError: MarketData.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_symbols.py::test_validate_symbol_format - TypeError: MarketData.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_system_init.py::test_initialize_success - TypeError: SystemInitializer.__init__() got an unexpected keyword argument 'db_connection'
ERROR tests/unit/test_system_init.py::test_initialize_database_failure - TypeError: SystemInitializer.__init__() got an unexpected keyword argument 'db_connection'
ERROR tests/unit/test_system_init.py::test_initialize_exchange_failure - TypeError: SystemInitializer.__init__() got an unexpected keyword argument 'db_connection'
ERROR tests/unit/test_system_load.py::test_collect_system_metrics_success
ERROR tests/unit/test_system_load.py::test_collect_system_metrics_failure
ERROR tests/unit/test_trade_execution.py::test_execute_trade_within_risk_limits - TypeError: ExchangeInterface.__init__() missing 3 required positional arguments: 'risk_manager', 'db_queries', a...
ERROR tests/unit/test_trade_execution.py::test_execute_trade_exceeds_risk_limits - TypeError: ExchangeInterface.__init__() missing 3 required positional arguments: 'risk_manager', 'db_queries', a...
ERROR tests/unit/test_trade_execution.py::test_execute_trade_exchange_failure - TypeError: ExchangeInterface.__init__() missing 3 required positional arguments: 'risk_manager', 'db_queries', a...
ERROR tests/unit/test_trade_execution_flow.py::test_full_trade_execution_flow
ERROR tests/unit/test_trade_execution_logic.py::test_execute_trade_within_risk_limits
ERROR tests/unit/test_trade_execution_logic.py::test_execute_trade_exceeds_risk_limits
ERROR tests/unit/test_trade_execution_logic.py::test_execute_trade_exchange_failure
ERROR tests/unit/test_trade_orders.py::test_create_order_success
ERROR tests/unit/test_trade_orders.py::test_create_order_api_failure
ERROR tests/unit/test_trade_orders.py::test_cancel_order_success
ERROR tests/unit/test_trade_orders.py::test_cancel_order_not_found
ERROR tests/unit/test_trading_ratchet.py::test_ratchet_initialize_trade - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_trading_ratchet.py::test_ratchet_increase_position_success - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_trading_ratchet.py::test_ratchet_decrease_position_success - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_trading_ratchet.py::test_ratchet_increase_position_exchange_error - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_trading_ratchet.py::test_ratchet_decrease_position_exchange_error - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_trading_ratchet.py::test_ratchet_max_steps_reached - decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
ERROR tests/unit/test_utils_health_monitor.py::test_check_database_success - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_database_failure - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_exchange_success - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_exchange_failure - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_is_system_healthy_all_components_healthy - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_is_system_healthy_one_component_unhealthy - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_collect_system_metrics_success - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_collect_system_metrics_failure - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_system_resources_success - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_system_resources_critical - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_market_data_success - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_market_data_failure - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_update_component_metrics - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_should_emergency_shutdown - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_get_system_metrics_failure - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_system_readiness_fresh_system - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_system_readiness_partially_ready - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_system_readiness_fully_ready - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_system_readiness_db_error - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_utils_health_monitor.py::test_check_system_readiness_no_db_connection - TypeError: HealthMonitor.__init__() got an unexpected keyword argument 'db_queries'
ERROR tests/unit/test_validation_tests.py::test_store_trade_invalid_data
ERROR tests/unit/test_validation_tests.py::test_insert_candle_data_invalid
ERROR tests/unit/test_validation_tests.py::test_store_trade_missing_fields
============================= 109 failed, 24 passed, 57 warnings, 126 errors in 2.86s ============================== 
(venv) PS C:\Users\Phil\Bot> 